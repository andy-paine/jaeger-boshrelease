<%-
  require 'yaml'
  flags = []

  # Collector directly mapped variables
  [
    'collector.grpc-port', 'collector.http-port', 'collector.num-workers', 'collector.port',
    'collector.queue-size', 'collector.queue-size-memory', 'collector.zipkin.http-port',
    'processor.jaeger-binary.server-host-port', 'processor.jaeger-binary.server-max-packet-size', 'processor.jaeger-binary.server-queue-size', 'processor.jaeger-binary.workers',
    'processor.jaeger-compact.server-host-port', 'processor.jaeger-compact.server-max-packet-size', 'processor.jaeger-compact.server-queue-size', 'processor.jaeger-compact.workers',
    'processor.zipkin-compact.server-host-port', 'processor.zipkin-compact.server-max-packet-size', 'processor.zipkin-compact.server-queue-size', 'processor.zipkin-compact.workers',
    'reporter.grpc.discovery.min-peers', 'reporter.grpc.retry.max', 'reporter.grpc.tls.skip-host-verify',
  ].each do |property|
    flags << "--#{property}=#{p(property)}"
  end

  # Collector formatted collections
  flags << "--collector.zipkin.allowed-headers='#{p('collector.zipkin.allowed-headers').join(',')}'"
  flags << "--collector.zipkin.allowed-origins='#{p('collector.zipkin.allowed-origins').join(',')}'"
  if_p('collector.tags') do |tags|
    formatted_tags = tags.map { |key,value| "#{key}=#{value}" }.join(',')
    flags << "--collector.tags='#{formatted_tags}'"
  end

  # Collector TLS configuration
  if_p('collector.grpc.tls.private_key', 'collector.grpc.tls.certificate') do |key, cert|
    flags << '--collector.grpc.tls.enabled=true'
    flags << '--collector.grpc.tls.key=/var/vcap/jobs/jaeger-all-in-one/tls/grpc.key'
    flags << '--collector.grpc.tls.cert=/var/vcap/jobs/jaeger-all-in-one/tls/grpc.crt'
  end.else do
    flags << '--collector.grpc.tls.enabled=false'
  end
  if_p('collector.grpc.tls.client-ca') do |_|
    flags << '--collector.grpc.tls.client-ca=/var/vcap/jobs/jaeger-all-in-one/tls/grpc-client-ca.crt'
  end

  if_p('reporter.grpc.host-port') do |host_port|
    flags << "--reporter.grpc.host-port='#{p('reporter.grpc.host-port').join(',')}'"
  end
  if_p('reporter.grpc.tls.private_key', 'reporter.grpc.tls.certificate') do |key,cert|
    flags << '--reporter.grpc.tls.enabled=true'
    flags << '--reporter.grpc.tls.key=/var/vcap/jobs/jaeger-all-in-one/tls/reporter/grpc.key'
    flags << '--reporter.grpc.tls.cert=/var/vcap/jobs/jaeger-all-in-one/tls/reporter/grpc.crt'
    if_p('reporter.grpc.tls.server-name') do |server|
      flags << "--reporter.grpc.tls.server-name=#{server}"
    end
    if_p('reporter.grpc.tls.ca') do |_|
      flags << '--reporter.grpc.tls.ca=/var/vcap/jobs/jaeger-all-in-one/tls/reporter/grpc-ca.crt'
    end
  end.else do
    flags << '--reporter.grpc.tls.enabled=false'
  end

  # Storage configuration
  case p('span_storage_type')
  when 'memory'
  when 'badger'
    flags << "--badger.ephemeral=false"
    flags << "--badger.directory-key=/var/vcap/store/jaeger-all-in-one/keys"
    flags << "--badger.directory-value=/var/vcap/store/jaeger-all-in-one/values"
    ['badger.consistency', 'badger.maintenance-interval', 'badger.metrics-update-interval', 'badger.read-only', 'badger.span-store-ttl', 'badger.truncate'].each do |property|
      flags << "--#{property}=#{p(property)}"
    end
  else
    raise "Only ['memory', 'badger'] are supported values for span_storage_type, not: #{p('span_storage_type')}"
  end
-%>
processes:
  - name: jaeger-all-in-one
    executable: /var/vcap/packages/jaeger/jaeger-all-in-one
    env:
      SPAN_STORAGE_TYPE: <%= p('span_storage_type') %>
    <%- if p('span_storage_type') == 'badger' %>
    additional_volumes:
    - path: /var/vcap/store/jaeger-all-in-one/keys
      writable: true
    - path: /var/vcap/store/jaeger-all-in-one/values
      writable: true
    <%- end %>

    args:
    - --admin-http-port=14269
    <%- flags.each do |flag| -%>
    - <%= flag %>
    <%- end -%>